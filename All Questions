All Question list
Problem 1

Write a function largest_sum that, given a list of integers nums, returns the maximum sum of a contiguous sublist of nums.

For example, given the list [-2, 1, -3, 4, -1, 2, 1, -5, 4], the function should return 6, because the contiguous sublist with the largest sum is [4, -1, 2, 1], which has a sum of 6.

You may assume that the input list has at least one positive integer.

Constraints

The input list has at most length $10^4$.
The elements of the input list are integers with absolute value at most $10^9$.
Notes

A contiguous sublist is a sequence of elements that appears in the input list in the same order that they appear in the input list.
A sublist is a subset of the input list, possibly with elements removed.

Example
largest_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4])

Output
6
----------------------------------------------------------------------------------------------------------------------------------------------------
Probelm 2

Write a function is_even that takes an integer n and returns True if n is even, and False otherwise.

Constraints

n is an integer with absolute value at most $10^9$.

Example
is_even(2)

Output
True
----------------------------------------------------------------------------------------------------------------------------------------------------
Problem 3 - beginner 
Write a function is_prime that takes a positive integer n and returns True if n is a prime number, and False otherwise.

Constraints
n is a positive integer with value at most $10^6$.

Examples
is_prime(2) => True
is_prime(3) => True
is_prime(4) => False
is_prime(5) => True
is_prime(6) => False

----------------------------------------------------------------------------------------------------------------------------------------------------

Problem 4 - begineer;
Write a function fizzbuzz that takes an integer n and returns a list of integers from 1 to n, replacing multiples of three with the string "Fizz", multiples of five with the string "Buzz", and multiples of both three and five with the string "FizzBuzz".

Constraints
n is an integer with value at most $10^3$.
Examples
fizzbuzz(15) => [1, 2, "Fizz", 4, "Buzz", "Fizz", 7, 8, "Fizz", "Buzz", 11, "Fizz", 13, 14, "FizzBuzz"]
fizzbuzz(5) => [1, 2, "Fizz", 4, "Buzz"]
fizzbuzz(3) => [1, 2, "Fizz"]

----------------------------------------------------------------------------------------------------------------------------------------------------
problem 5 - 10.01.23

Problem for beginners:
Write a function is_unique that takes a string s and returns True if all the characters in s are unique, and False otherwise.

Examples

is_unique("abcdefg") => True
is_unique("abcdefga") => False
is_unique("") => True
----------------------------------------------------------------------------------------------------------------------------------------------------
Problem 6 - 11.01.23
 
Problem for intermediate coders:
Write a function longest_palindromic_substring that takes a string s and returns the longest palindromic substring of s.
A palindromic substring is a substring of a string that is the same when read forwards and backwards.
You may assume that the input string has at least one character.

Constraints
The input string has at most length $10^5$.

Examples
longest_palindromic_substring("babad") => "bab" or "aba"
longest_palindromic_substring("cbbd") => "bb"
longest_palindromic_substring("a") => "a"

----------------------------------------------------------------------------------------------------------------------------------------------------
Problem 7 - 12.01.23
Write a function frequency that takes a string s and returns the frequency of each Character in the string.
You may assume that the input string has at least one character.

Examples:
frequency("Decode") => {d:2, e:2, c:1, o:1}
frequency("Hello") => {h:1, e:1, l:2, o:1}
----------------------------------------------------------------------------------------------------------------------------------------------------
Problem 8 - 13.01.23;
Write a function largest_rectangle_area that takes a list of non-negative integers heights and returns the area of the largest rectangle that can be formed using the given heights as the heights of the rectangles.
For example, given the list [2, 1, 5, 6, 2, 3], the function should return 10, because the largest rectangle can be formed using the heights [2, 2], which has an area of 4 and the heights [5, 6], which has an area of 6, for a total area of 10.
You may assume that the input list has at least one element.

Constraints
The input list has at most length $10^5$.
The elements of the input list are non-negative integers with value at most $10^6$.

Examples
largest_rectangle_area([2, 1, 5, 6, 2, 3]) => 10
largest_rectangle_area([3, 6, 5, 7, 4]) => 12
largest_rectangle_area([5, 4, 3, 2, 1]) => 9
----------------------------------------------------------------------------------------------------------------------------------------------------
Problem 9 - 14.01.23

Write a function min_steps that takes a positive integer n and returns the minimum number of steps needed to reach 1 by applying the following rules:

If n is even, divide it by 2.
If n is odd, either add 1 or subtract 1.

Constraints
n is a positive integer with value at most $10^6$.

Examples
min_steps(1) => 0
min_steps(2) => 1
min_steps(3) => 2
min_steps(4) => 2
min_steps(5) => 3

----------------------------------------------------------------------------------------------------------------------------------------------------
Problem: 10 - specail

Given a string containing only digits, restore it by returning all possible valid IP address combinations.

A valid IP address consists of four fields, each field is separated by a "." and must contain a value between 0 and 255 (inclusive).

For example:

Input: "25525511135"
Output: ["255.255.11.135", "255.255.111.35"]

Constraints:

The string length must be between 4 and 12.
Coding:

Create a helper function is_valid(s) that returns True if a given string s is a valid IP field (i.e. between 0 and 255 inclusive) and False otherwise.
Initialize an empty list res to store the valid IP addresses.
Use a nested for loop to generate all possible combinations of IP fields.
In the innermost loop, use the helper function to check if the current combination of fields is valid. If it is, add it to the res list as a string joined by ".".
Return the res list.
Note:

Be mindful of edge cases, like leading zeros in the fields and fields greater than 255.
Your task is to write a function that will take the string as an input and returns all possible valid IP address combinations.
----------------------------------------------------------------------------------------------------------------------------------------------------



